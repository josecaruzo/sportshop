package br.com.fiap.mssales.utils;

import br.com.fiap.mssales.entity.Customer;
import br.com.fiap.mssales.entity.Product;
import br.com.fiap.mssales.entity.Purchase;
import br.com.fiap.mssales.entity.PurchaseItem;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.List;

public class PurchaseUtils {
	public static Purchase createFakePurchase() {
		Purchase purchase = new Purchase();
		PurchaseItem purchaseItem1 = PurchaseItemUtils.createFakePurchaseItem(1L, 1);
		PurchaseItem purchaseItem2 = PurchaseItemUtils.createFakePurchaseItem(2L, 1);

		List<PurchaseItem> itemsList = List.of(purchaseItem1, purchaseItem2);

		purchase.setCustomerCpf("822.685.230-71"); //Random CPF generated by 4devs.com.br site
		purchase.setCustomerName("Dummy customer");
		purchase.setDeliveryAddress("Rua dos Bobos, 0");
		purchase.setDeliveryZipCode("00000-000");
		purchase.setStatus("AGUARDANDO PAGAMENTO");
		purchase.setItems(itemsList);

		return purchase;
	}

	public static Purchase createFakePurchase(Long purchaseId) {
		Purchase purchase = new Purchase();
		PurchaseItem purchaseItem1 = PurchaseItemUtils.createFakePurchaseItem(1L, 1);
		PurchaseItem purchaseItem2 = PurchaseItemUtils.createFakePurchaseItem(2L, 1);

		List<PurchaseItem> itemsList = List.of(purchaseItem1, purchaseItem2);

		purchase.setId(purchaseId);
		purchase.setCustomerCpf("822.685.230-71"); //Random CPF generated by 4devs.com.br site
		purchase.setCustomerName("Dummy customer");
		purchase.setDeliveryAddress("Rua dos Bobos, 0");
		purchase.setDeliveryZipCode("00000-000");
		purchase.setStatus("AGUARDANDO PAGAMENTO");
		purchase.setItems(itemsList);

		return purchase;
	}

	public static Purchase createFakePurchase(String status) {
		Purchase purchase = new Purchase();
		PurchaseItem purchaseItem1 = PurchaseItemUtils.createFakePurchaseItem(1L, 1);
		PurchaseItem purchaseItem2 = PurchaseItemUtils.createFakePurchaseItem(2L, 1);

		List<PurchaseItem> itemsList = List.of(purchaseItem1, purchaseItem2);

		purchase.setCustomerCpf("822.685.230-71"); //Random CPF generated by 4devs.com.br site
		purchase.setCustomerName("Dummy customer");
		purchase.setDeliveryAddress("Rua dos Bobos, 0");
		purchase.setDeliveryZipCode("00000-000");
		purchase.setStatus(status);
		purchase.setItems(itemsList);

		return purchase;
	}

	public static Purchase createFakePurchase(Long purchaseId, String status) {
		Purchase purchase = new Purchase();
		PurchaseItem purchaseItem1 = PurchaseItemUtils.createFakePurchaseItem(1L, 1);
		PurchaseItem purchaseItem2 = PurchaseItemUtils.createFakePurchaseItem(2L, 1);

		List<PurchaseItem> itemsList = List.of(purchaseItem1, purchaseItem2);

		purchase.setId(purchaseId);
		purchase.setCustomerCpf("822.685.230-71"); //Random CPF generated by 4devs.com.br site
		purchase.setCustomerName("Dummy customer");
		purchase.setDeliveryAddress("Rua dos Bobos, 0");
		purchase.setDeliveryZipCode("00000-000");
		purchase.setStatus(status);
		purchase.setItems(itemsList);

		return purchase;
	}

	public static String asJsonString(final Object object) throws JsonProcessingException {
		return new ObjectMapper().writeValueAsString(object);
	}

	public static Customer createFakeCustomer() {
		Customer customer = new Customer();
		customer.setCpf("822.685.230-71"); //Random CPF generated by 4devs.com.br site
		customer.setFullName("Dummy customer");
		customer.setEmail("dummycustomer@email.com");
		customer.setZipCode("00000-000");
		customer.setAddress("Rua dos Bobos, 0");
		customer.setCity("São Paulo");
		customer.setState("São Paulo");
		customer.setCountry("Brasil");

		return customer;
	}

	public static Product createFakeProduct() {
		Product product = new Product();
		product.setId(1000000L);
		product.setName("Dummy product");
		product.setDescription("Dummy product description");
		product.setPrice(15.80f);
		product.setQuantity(100);

		return product;
	}
}
